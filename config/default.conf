server {
  listen 80;
  listen 443 ssl;
  ssl_certificate /etc/nginx/certs/dev.crt;
  ssl_certificate_key /etc/nginx/certs/dev.key;
  server_name _;
  root /usr/share/nginx/html;

  # Redirect root to status page
  location = / {
    return 302 /status;
  }

  location = /favicon.ico {
    try_files /status/assets/favicon.png /status/favicon.png =404;
  }

  # Machine health (JSON)
  location = /health.json {
    add_header Content-Type application/json always;
    return 200 '{"status":"ok","service":"dev-tunnel-proxy"}';
  }

  # Human health (HTML dashboard)
  location = /health {
    try_files /status/health.html =404;
  }
  # Handle trailing slash
  location = /health/ { return 302 /health; }

  # Status JSON (latest health report)
  location = /status.json {
    types { application/json json; }
    try_files /.artifacts/reports/health-latest.json =404;
  }

  # Status HTML (simple viewer)
  location = /status {
    try_files /status/status.html =404;
  }
  # Ensure /status/* assets are served regardless of app regex blocks
  location ^~ /status/ {
    try_files $uri /status/status.html =404;
  }
  # Serve root logo asset for branding
  location = /dev-tunnel-proxy.svg {
    try_files /dev-tunnel-proxy.svg =404;
  }
  # Handle trailing slash
  location = /status/ { return 302 /status; }

  # Ngrok JSON (expose from health-latest for convenience)
  location = /ngrok.json {
    types { application/json json; }
    try_files /.artifacts/reports/health-latest.json =404;
  }

  # Dashboard (route-focused tools) - static served by nginx from /usr/share/nginx/html/dashboard
  location = /dashboard { return 302 /dashboard/; }
  location ^~ /dashboard/ {
    try_files $uri /dashboard/index.html =404;
    add_header Cache-Control "no-store" always;
  }
  # Dashboard expects /routes; map it to routes.json
  location = /routes {
    types { application/json json; }
    try_files /.artifacts/reports/scan-apps-latest.json =404;
  }

  # Routes JSON (latest scan)
  location = /routes.json {
    types { application/json json; }
    try_files /.artifacts/reports/scan-apps-latest.json =404;
  }

  # Storybook absolute paths (safety net at server level)
  # These blocks will only be used if there's no matching location in the app configs
  # If you change these, also update the autofix in utils/conflictAPI.js (self-heal)
  location = /iframe.html {
    proxy_set_header Host $host;
    resolver 127.0.0.11 ipv6=off;
    resolver_timeout 5s;
    set $sb encast-sdk:6006;
    proxy_pass http://$sb/iframe.html;
  }
  location = /sdk/iframe.html {
    proxy_set_header Host $host;
    resolver 127.0.0.11 ipv6=off;
    resolver_timeout 5s;
    set $sb encast-sdk:6006;
    proxy_pass http://$sb/iframe.html;
  }

  # Browse reports
  location ^~ /reports/ {
    alias /usr/share/nginx/html/.artifacts/reports/;
    autoindex on;
  }

  # Conflict Management API (proxy to Node.js service)
  location ^~ /api/config/ {
    proxy_pass http://host.docker.internal:3001;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location = /api/resolve-conflict {
    proxy_pass http://host.docker.internal:3001;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location = /api/rename-route {
    proxy_pass http://host.docker.internal:3001;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # Overrides conflict management (list conflicts, promote app config into overrides)
  location ^~ /api/overrides/ {
    proxy_pass http://host.docker.internal:3001;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # AI assistant endpoints (optional; proxied to Node API)

  location ^~ /api/ai/ {
    proxy_pass http://host.docker.internal:3001;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
  # Dashboard static app proxies to AI via /proxy/ai/*
  location ^~ /proxy/ai/ {
    proxy_pass http://host.docker.internal:3001/api/ai/;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # Generated app routes (proxy-owned precedence)
  include /etc/nginx/conf.d/sites-enabled/*.conf;
}